---
import { getCollection } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import ForceGraph from "../components/ForceGraph";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

const posts = (await getCollection("notes")).sort(
  (a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);

let nodes: { id: string; name: string }[] = [];
let links: { source: string; target: string }[] = [];

const wikilinkRegExp = /\[\[\s?([^\[\]\|\n\r]+)(\|[^\[\]\|\n\r]+)?\s?\]\]/g;

posts.map((post) => {
  nodes.push({ id: post.slug, name: post.data.title });

  (post.body.match(wikilinkRegExp) || []).map((slug) => {
    const newSlug = slug
      .slice(2, -2)
      .split("|")[0]
      .replace(/.(md|markdown)\s?$/i, "")
      .trim();

    if (newSlug) {
      links.push({
        source: post.slug,
        target: newSlug,
      });
    }
  });
});
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <ViewTransitions />

    <style>
      main {
        order: 2;
        max-width: calc(100% - 2em);
        min-height: calc(70vh - 78px);
      }

      article {
        max-width: 720px;
        margin: 0 auto;
      }

      .graph-container {
        order: 1;
        width: 100%;
        height: 30vh;
        margin: 0 auto;
        overflow: hidden;
      }

      @media (min-width: 1200px) {
        main {
          order: 1;
          margin: 0;
          width: 50%;
          min-height: calc(100vh - 78px);
        }
        .graph-container {
          order: 2;
          position: fixed;
          top: 0;
          left: 50%;
          width: 50%;
          height: auto;
        }
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <slot />
      </article>
      <Footer nav />
    </main>
    <aside class="graph-container">
      <ForceGraph
        data={{ nodes, links }}
        client:only="react"
        transition:persist="graph"
      />
    </aside>
  </body>
</html>
